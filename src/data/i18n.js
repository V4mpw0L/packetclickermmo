/*!
 * Packet Clicker - I18N (UMD)
 * Provides hardcoded dictionaries and helpers for en, pt-br, ru.
 *
 * Usage (global):
 *   // Read/Set language
 *   Packet.i18n.getLanguage(); // -> 'en' (default)
 *   Packet.i18n.setLanguage('pt-br'); // persists, dispatches 'packet:i18n:change'
 *
 *   // Translate
 *   Packet.i18n.t('tabs.game'); // -> "Game" (or localized)
 *   Packet.i18n.t('prestige.prestigeNow', { n: 12 }); // interpolation
 *
 *   // Optional: localize known global data catalogs (names/descriptions)
 *   Packet.i18n.applyLanguageToData();
 *
 * This module never throws; it fails safe and falls back to English or key.
 */
(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], function () {
      return factory(root);
    });
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory(root);
  } else {
    root.Packet = root.Packet || {};
    root.Packet.i18n = factory(root);
  }
})(typeof self !== "undefined" ? self : this, function (g) {
  "use strict";

  var LS_KEY =
    (g.Packet &&
      g.Packet.data &&
      (g.Packet.data.STORAGE_KEY || "").replace(/_save_.+$/, "_lang")) ||
    "packet_clicker_lang";

  var DEFAULT_LANG = "en";
  var SUPPORTED = ["en", "pt-br", "ru"];

  // Simple deep get with "a.b.c" path
  function getPath(obj, path) {
    if (!obj || !path) return undefined;
    var cur = obj;
    var parts = String(path).split(".");
    for (var i = 0; i < parts.length; i++) {
      if (cur && Object.prototype.hasOwnProperty.call(cur, parts[i])) {
        cur = cur[parts[i]];
      } else {
        return undefined;
      }
    }
    return cur;
  }

  // Tiny template interpolation: "Hello {name}"
  function format(str, params) {
    if (!str || !params) return str;
    return String(str).replace(/\{(\w+)\}/g, function (_, k) {
      return Object.prototype.hasOwnProperty.call(params, k)
        ? String(params[k])
        : "{" + k + "}";
    });
  }

  // Detect valid lang or fallback
  function normalizeLang(lang) {
    if (!lang) return DEFAULT_LANG;
    var l = String(lang).toLowerCase();
    if (SUPPORTED.indexOf(l) >= 0) return l;
    // accept "pt" -> "pt-br"
    if (l === "pt") return "pt-br";
    if (l.startsWith("pt-")) return "pt-br";
    if (l.startsWith("ru")) return "ru";
    return DEFAULT_LANG;
  }

  function getLanguage() {
    try {
      var stored = g.localStorage && g.localStorage.getItem(LS_KEY);
      if (stored) return normalizeLang(stored);
    } catch (_) {}
    // try navigator
    try {
      var nav =
        (g.navigator && (g.navigator.language || g.navigator.userLanguage)) ||
        "";
      return normalizeLang(nav);
    } catch (_) {}
    return DEFAULT_LANG;
  }

  function setLanguage(lang) {
    var l = normalizeLang(lang);
    try {
      g.localStorage && g.localStorage.setItem(LS_KEY, l);
    } catch (_) {}
    // Reflect <html lang="..">
    try {
      if (g.document && g.document.documentElement) {
        g.document.documentElement.setAttribute("lang", l);
      }
    } catch (_) {}
    // Notify listeners
    try {
      var evt;
      if (typeof g.CustomEvent === "function") {
        evt = new g.CustomEvent("packet:i18n:change", { detail: { lang: l } });
      } else {
        evt = g.document.createEvent("Event");
        evt.initEvent("packet:i18n:change", true, true);
      }
      g.dispatchEvent(evt);
    } catch (_) {}
    return l;
  }

  // Translation dictionaries
  var dict = {
    en: {
      tabs: {
        game: "Game",
        upgrades: "Upgrades",
        achievements: "Achievements",
        shop: "Shop",
        leaderboard: "Leaderboard",
        prestige: "Prestige",
        daily: "Daily Rewards",
        boosts: "Temporary Boosts",
        themes: "Themes",
      },
      buttons: {
        collect: "Collect Packets",
        prestigeAvailable: "‚≠ê Prestige Available",
        prestigeNow: "Prestige Now! (+{n} üî∑)",
        save: "Save",
        editProfile: "Edit Profile",
        claimDaily: "Claim Day {n} Reward!",
      },
      labels: {
        packetsPerClick: "Packets/Click",
        packetsPerSec: "Packets/Sec",
        critChance: "Crit Chance",
        critMultiplier: "Crit Multiplier",
        level: "Level",
        dataShards: "Data Shards",
        streak: "Streak",
        day: "Day",
        version: "Version",
        adBanner: "Ad Banner (Remove in Shop)",
      },
      settings: {
        title: "Settings",
        sfx: "Game Sound Effects",
        graphics: "Graphics Quality",
        graphicsHigh: "High (Default)",
        graphicsMedium: "Medium (Reduced Effects)",
        graphicsLow: "Low (Minimal Effects)",
        graphicsNote: "Lower settings improve performance on older devices",
        note: "All progress is saved locally.<br>For mobile, use Store in-app for real gems/ads!",
      },
      profile: {
        title: "Edit Profile",
        name: "Name:",
        avatar: "Avatar:",
        save: "Save",
        updated: "Profile updated!",
      },
      prestige: {
        title: "‚≠ê Prestige",
        prestigeNow: "Prestige Now! (+{n} üî∑)",
        resetHint: "Reset progress for permanent bonuses",
        need: "Need 50,000 packets to prestige",
        current: "Current: {curr}",
        levelUp: "Prestige Level {level}!",
      },
      boosts: {
        title: "‚ö° Temporary Boosts",
        available: "Available Boosts",
        stackHint: "Boosts stack with other bonuses for maximum effect!",
      },
      daily: {
        title: "Daily Rewards",
        comeBack: "Come back tomorrow for next reward!",
      },
      events: {
        packetRain: {
          name: "Packet Rain",
          desc: "Raining packets for 60s",
        },
        bonusPackets: {
          name: "Bonus Packets",
          desc: "You gained {n} packets!",
        },
        gemRush: {
          name: "Gem Rush",
          desc: "Gems appear more often for 60s",
        },
        upgradeDiscount: {
          name: "Upgrade Sale!",
          desc: "50% off all upgrades for 3 minutes",
        },
      },
      notify: {
        luckyClick: "LUCKY CLICK! 10x",
        gemsFound: "+{gems} üíé (Found!)",
        boostActivated: "{name} activated!",
        upgraded: "{name} upgraded!",
      },
      modals: {
        errorTitle: "Error",
        errorCorrupt:
          "Save data was corrupted and has been reset.<br>Starting a new game.",
        updatedTitle: "Game Updated",
        updatedBody:
          "Old save was incompatible and has been reset.<br>Enjoy the new version!",
      },
    },

    "pt-br": {
      tabs: {
        game: "Jogo",
        upgrades: "Melhorias",
        achievements: "Conquistas",
        shop: "Loja",
        leaderboard: "Ranking",
        prestige: "Prest√≠gio",
        daily: "Recompensas Di√°rias",
        boosts: "Boosts Tempor√°rios",
        themes: "Temas",
      },
      buttons: {
        collect: "Coletar Pacotes",
        prestigeAvailable: "‚≠ê Prest√≠gio Dispon√≠vel",
        prestigeNow: "Prestigiar Agora! (+{n} üî∑)",
        save: "Salvar",
        editProfile: "Editar Perfil",
        claimDaily: "Resgatar Recompensa do Dia {n}!",
      },
      labels: {
        packetsPerClick: "Pacotes/Clique",
        packetsPerSec: "Pacotes/Seg",
        critChance: "Chance de Cr√≠tico",
        critMultiplier: "Multiplicador de Cr√≠tico",
        level: "N√≠vel",
        dataShards: "Fragmentos de Dados",
        streak: "Sequ√™ncia",
        day: "Dia",
        version: "Vers√£o",
        adBanner: "Banner de An√∫ncio (Remova na Loja)",
      },
      settings: {
        title: "Configura√ß√µes",
        sfx: "Efeitos Sonoros do Jogo",
        graphics: "Qualidade Gr√°fica",
        graphicsHigh: "Alta (Padr√£o)",
        graphicsMedium: "M√©dia (Efeitos Reduzidos)",
        graphicsLow: "Baixa (Efeitos M√≠nimos)",
        graphicsNote:
          "Configura√ß√µes menores melhoram performance em dispositivos antigos",
        note: "Todo progresso √© salvo localmente.<br>No mobile, use a Loja do app para gemas/an√∫ncios reais!",
      },
      profile: {
        title: "Editar Perfil",
        name: "Nome:",
        avatar: "Avatar:",
        save: "Salvar",
        updated: "Perfil atualizado!",
      },
      prestige: {
        title: "‚≠ê Prest√≠gio",
        prestigeNow: "Prestrigiar Agora! (+{n} üî∑)",
        resetHint: "Resetar progresso por b√¥nus permanentes",
        need: "Precisa de 50.000 pacotes para prestigiar",
        current: "Atual: {curr}",
        levelUp: "N√≠vel de Prest√≠gio {level}!",
      },
      boosts: {
        title: "‚ö° Boosts Tempor√°rios",
        available: "Boosts dispon√≠veis",
        stackHint: "Boosts acumulam com outros b√¥nus para efeito m√°ximo!",
      },
      daily: {
        title: "üìÖ Recompensas Di√°rias",
        comeBack: "Volte amanh√£ para a pr√≥xima recompensa!",
      },
      events: {
        packetRain: {
          name: "Chuva de Pacotes",
          desc: "Chovendo pacotes por 60s",
        },
        bonusPackets: {
          name: "Pacotes B√¥nus",
          desc: "Voc√™ ganhou {n} pacotes!",
        },
        gemRush: {
          name: "Corrida de Gemas",
          desc: "Gemas aparecem com mais frequ√™ncia por 60s",
        },
        upgradeDiscount: {
          name: "Promo√ß√£o de Melhorias!",
          desc: "50% de desconto em todas as melhorias por 3 minutos",
        },
      },
      notify: {
        luckyClick: "CLIQUE DA SORTE! 10x",
        gemsFound: "+{gems} üíé (Encontrado!)",
        boostActivated: "{name} ativado!",
        upgraded: "{name} melhorado!",
      },
      modals: {
        errorTitle: "Erro",
        errorCorrupt:
          "Os dados do save foram corrompidos e foram resetados.<br>Iniciando um novo jogo.",
        updatedTitle: "Jogo Atualizado",
        updatedBody:
          "O save antigo era incompat√≠vel e foi resetado.<br>Aproveite a nova vers√£o!",
      },
    },

    ru: {
      tabs: {
        game: "–ò–≥—Ä–∞",
        upgrades: "–£–ª—É—á—à–µ–Ω–∏—è",
        achievements: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
        shop: "–ú–∞–≥–∞–∑–∏–Ω",
        leaderboard: "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
        prestige: "–ü—Ä–µ—Å—Ç–∏–∂",
        daily: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã",
        boosts: "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Å—Ç—ã",
        themes: "–¢–µ–º—ã",
      },
      buttons: {
        collect: "–°–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç—ã",
        prestigeAvailable: "‚≠ê –î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–µ—Å—Ç–∏–∂",
        prestigeNow: "–ü—Ä–µ—Å—Ç–∏–∂ —Å–µ–π—á–∞—Å! (+{n} üî∑)",
        save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        editProfile: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        claimDaily: "–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–µ–Ω—å {n}!",
      },
      labels: {
        packetsPerClick: "–ü–∞–∫–µ—Ç—ã/–∫–ª–∏–∫",
        packetsPerSec: "–ü–∞–∫–µ—Ç—ã/—Å–µ–∫",
        critChance: "–®–∞–Ω—Å –∫—Ä–∏—Ç.",
        critMultiplier: "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—Ä–∏—Ç.",
        level: "–£—Ä–æ–≤–µ–Ω—å",
        dataShards: "–î–∞—Ç–∞-–æ—Å–∫–æ–ª–∫–∏",
        streak: "–°–µ—Ä–∏—è",
        day: "–î–µ–Ω—å",
        version: "–í–µ—Ä—Å–∏—è",
        adBanner: "–†–µ–∫–ª–∞–º–Ω—ã–π –±–∞–Ω–Ω–µ—Ä (—É–¥–∞–ª–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ)",
      },
      settings: {
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        sfx: "–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–≥—Ä—ã",
        graphics: "–ö–∞—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–∏",
        graphicsHigh: "–í—ã—Å–æ–∫–æ–µ (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
        graphicsMedium: "–°—Ä–µ–¥–Ω–µ–µ (–£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã)",
        graphicsLow: "–ù–∏–∑–∫–æ–µ (–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã)",
        graphicsNote:
          "–ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ª—É—á—à–∞—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö",
        note: "–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ.<br>–ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –≥–µ–º–æ–≤/—Ä–µ–∫–ª–∞–º—ã!",
      },
      profile: {
        title: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        name: "–ò–º—è:",
        avatar: "–ê–≤–∞—Ç–∞—Ä:",
        save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        updated: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!",
      },
      prestige: {
        title: "‚≠ê –ü—Ä–µ—Å—Ç–∏–∂",
        prestigeNow: "–ü—Ä–µ—Å—Ç–∏–∂ —Å–µ–π—á–∞—Å! (+{n} üî∑)",
        resetHint: "–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã",
        need: "–ù—É–∂–Ω–æ 50‚ÄØ000 –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ—Å—Ç–∏–∂–∞",
        current: "–¢–µ–∫—É—â–∏–µ: {curr}",
        levelUp: "–£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ—Å—Ç–∏–∂–∞ {level}!",
      },
      boosts: {
        title: "‚ö° –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Å—Ç—ã",
        available: "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—É—Å—Ç—ã",
        stackHint:
          "–ë—É—Å—Ç—ã —Å—É–º–º–∏—Ä—É—é—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –±–æ–Ω—É—Å–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞!",
      },
      daily: {
        title: "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã",
        comeBack: "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥–æ–π!",
      },
      events: {
        packetRain: {
          name: "–î–æ–∂–¥—å –ø–∞–∫–µ—Ç–æ–≤",
          desc: "–ü–∞–∫–µ—Ç—ã —Å—ã–ø—è—Ç—Å—è 60—Å",
        },
        bonusPackets: {
          name: "–ë–æ–Ω—É—Å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã",
          desc: "–í—ã –ø–æ–ª—É—á–∏–ª–∏ {n} –ø–∞–∫–µ—Ç–æ–≤!",
        },
        gemRush: {
          name: "–í—Å–ø–ª–µ—Å–∫ –≥–µ–º–æ–≤",
          desc: "–ì–µ–º—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è —á–∞—â–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 60—Å",
        },
        upgradeDiscount: {
          name: "–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ —É–ª—É—á—à–µ–Ω–∏–π!",
          desc: "–°–∫–∏–¥–∫–∞ 50% –Ω–∞ –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ 3 –º–∏–Ω—É—Ç—ã",
        },
      },
      notify: {
        luckyClick: "–£–î–ê–ß–ù–´–ô –ö–õ–ò–ö! 10x",
        gemsFound: "+{gems} üíé (–ù–∞–π–¥–µ–Ω—ã!)",
        boostActivated: "{name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        upgraded: "{name} —É–ª—É—á—à–µ–Ω–æ!",
      },
      modals: {
        errorTitle: "–û—à–∏–±–∫–∞",
        errorCorrupt:
          "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.<br>–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.",
        updatedTitle: "–ò–≥—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        updatedBody:
          "–°—Ç–∞—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ –∏ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ.<br>–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π!",
      },
    },
  };

  // Optional: map catalog ids to localized name/desc
  var catalogMap = {
    prestigeUpgrades: {
      // id -> { name, desc }
      autoClicker: {
        en: { name: "Auto Clicker", desc: "Clicks 1/sec automatically" },
        "pt-br": {
          name: "Auto Clique",
          desc: "Clica 1/seg automaticamente",
        },
        ru: { name: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä", desc: "–ê–≤—Ç–æ–∫–ª–∏–∫ 1/—Å–µ–∫" },
      },
      packetBoost: {
        en: { name: "Packet Multiplier", desc: "+10% packet gain per level" },
        "pt-br": {
          name: "Multiplicador de Pacotes",
          desc: "+10% pacotes por n√≠vel",
        },
        ru: {
          name: "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–∞–∫–µ—Ç–æ–≤",
          desc: "+10% –ø–∞–∫–µ—Ç–æ–≤ –∑–∞ —É—Ä–æ–≤–µ–Ω—å",
        },
      },
      gemFind: {
        en: { name: "Gem Hunter", desc: "5% chance to find gems on click" },
        "pt-br": {
          name: "Ca√ßador de Gemas",
          desc: "5% de chance de achar gemas ao clicar",
        },
        ru: { name: "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –≥–µ–º–∞–º–∏", desc: "5% –Ω–∞–π—Ç–∏ –≥–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ" },
      },
      critBoost: {
        en: { name: "Critical Master", desc: "+5% crit chance per level" },
        "pt-br": {
          name: "Mestre do Cr√≠tico",
          desc: "+5% de chance de cr√≠tico por n√≠vel",
        },
        ru: { name: "–ú–∞—Å—Ç–µ—Ä –∫—Ä–∏—Ç–∞", desc: "+5% —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å" },
      },
      offlineEarnings: {
        en: { name: "Offline Earnings", desc: "Earn while away" },
        "pt-br": {
          name: "Ganhos Offline",
          desc: "Ganhe enquanto estiver fora",
        },
        ru: { name: "–î–æ—Ö–æ–¥ –æ—Ñ–ª–∞–π–Ω", desc: "–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ" },
      },
      luckyClicks: {
        en: { name: "Lucky Clicks", desc: "Chance for 10x clicks" },
        "pt-br": { name: "Cliques da Sorte", desc: "Chance de cliques 10x" },
        ru: { name: "–£–¥–∞—á–Ω—ã–µ –∫–ª–∏–∫–∏", desc: "–®–∞–Ω—Å 10x –∫–ª–∏–∫–∞" },
      },
      megaCrits: {
        en: { name: "Mega Crits", desc: "Crits give 3x instead of 2x" },
        "pt-br": {
          name: "Mega Cr√≠ticos",
          desc: "Cr√≠ticos d√£o 3x em vez de 2x",
        },
        ru: { name: "–ú–µ–≥–∞-–∫—Ä–∏—Ç—ã", desc: "–ö—Ä–∏—Ç 3x –≤–º–µ—Å—Ç–æ 2x" },
      },
    },
    boosts: {
      doublePackets: {
        en: { name: "2x Packets", desc: "Double packet gain" },
        "pt-br": { name: "2x Pacotes", desc: "Dobra os pacotes ganhos" },
        ru: { name: "2x –ü–∞–∫–µ—Ç—ã", desc: "–î–≤–æ–π–Ω–æ–π –ø—Ä–∏—Ä–æ—Å—Ç –ø–∞–∫–µ—Ç–æ–≤" },
      },
      tripleGems: {
        en: { name: "3x Gems", desc: "Triple gem find chance" },
        "pt-br": { name: "3x Gemas", desc: "Triplica chance de gemas" },
        ru: { name: "3x –ì–µ–º—ã", desc: "–¢—Ä–æ–π–Ω–æ–π —à–∞–Ω—Å –≥–µ–º–æ–≤" },
      },
      quadrupleClick: {
        en: { name: "4x Click Power", desc: "Quadruple click power" },
        "pt-br": { name: "4x Poder de Clique", desc: "Quadruplica o clique" },
        ru: { name: "4x –°–∏–ª–∞ –∫–ª–∏–∫–∞", desc: "–í 4 —Ä–∞–∑–∞ —Å–∏–ª—å–Ω–µ–µ –∫–ª–∏–∫" },
      },
      megaCrit: {
        en: { name: "Mega Crit Mode", desc: "50% crit chance for 2 minutes" },
        "pt-br": {
          name: "Modo Mega Cr√≠tico",
          desc: "50% de cr√≠tico por 2 minutos",
        },
        ru: { name: "–†–µ–∂–∏–º –º–µ–≥–∞–∫—Ä–∏—Ç–∞", desc: "50% –∫—Ä–∏—Ç. –Ω–∞ 2 –º–∏–Ω—É—Ç—ã" },
      },
      autoClicker: {
        en: { name: "Auto-Clicker", desc: "Adds +10/s auto-clicking" },
        "pt-br": { name: "Auto-Clique", desc: "Adiciona +10/seg de clique" },
        ru: { name: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä", desc: "–î–æ–±–∞–≤–ª—è–µ—Ç +10/—Å –∞–≤—Ç–æ–∫–ª–∏–∫–∞" },
      },
    },
    randomEvents: {
      packetRain: {
        en: { name: "Packet Rain", desc: "Raining packets for 60s" },
        "pt-br": { name: "Chuva de Pacotes", desc: "Chovendo pacotes por 60s" },
        ru: { name: "–î–æ–∂–¥—å –ø–∞–∫–µ—Ç–æ–≤", desc: "–ü–∞–∫–µ—Ç—ã —Å—ã–ø—è—Ç—Å—è 60—Å" },
      },
      bonusPackets: {
        en: { name: "Bonus Packets", desc: "You gained {n} packets!" },
        "pt-br": { name: "Pacotes B√¥nus", desc: "Voc√™ ganhou {n} pacotes!" },
        ru: { name: "–ë–æ–Ω—É—Å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã", desc: "–í—ã –ø–æ–ª—É—á–∏–ª–∏ {n} –ø–∞–∫–µ—Ç–æ–≤!" },
      },
      gemRush: {
        en: { name: "Gem Rush", desc: "Gems appear more often for 60s" },
        "pt-br": {
          name: "Corrida de Gemas",
          desc: "Gemas aparecem com mais frequ√™ncia por 60s",
        },
        ru: { name: "–í—Å–ø–ª–µ—Å–∫ –≥–µ–º–æ–≤", desc: "–ì–µ–º—ã —á–∞—â–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 60—Å" },
      },
      upgradeDiscount: {
        en: {
          name: "Upgrade Sale!",
          desc: "50% off all upgrades for 3 minutes",
        },
        "pt-br": {
          name: "Promo√ß√£o de Melhorias!",
          desc: "50% de desconto em todas as melhorias por 3 minutos",
        },
        ru: {
          name: "–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ —É–ª—É—á—à–µ–Ω–∏–π!",
          desc: "–°–∫–∏–¥–∫–∞ 50% –Ω–∞ –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ 3 –º–∏–Ω—É—Ç—ã",
        },
      },
    },
  };

  function t(key, params, lang) {
    var l = normalizeLang(lang || getLanguage());
    var value = getPath(dict[l], key);
    if (value == null) {
      // fallback to English
      value = getPath(dict.en, key);
      if (value == null) return key;
    }
    if (params) return format(value, params);
    return value;
  }

  // Optional: translate known global content arrays in-place if present
  function applyLanguageToData(lang) {
    var l = normalizeLang(lang || getLanguage());

    // Helper to patch array items by id
    function patchArray(arr, map) {
      if (!arr || !map) return;
      try {
        for (var i = 0; i < arr.length; i++) {
          var it = arr[i];
          if (!it || !it.id || !map[it.id]) continue;
          var loc = map[it.id][l] || map[it.id].en;
          if (loc && loc.name) it.name = loc.name;
          if (loc && loc.desc && typeof it.desc === "string")
            it.desc = loc.desc;
        }
      } catch (_) {}
    }

    try {
      // Globals (non-module)
      if (g.PRESTIGE_UPGRADES && Array.isArray(g.PRESTIGE_UPGRADES)) {
        patchArray(g.PRESTIGE_UPGRADES, catalogMap.prestigeUpgrades);
      }
      if (g.BOOST_SHOP && Array.isArray(g.BOOST_SHOP)) {
        patchArray(g.BOOST_SHOP, catalogMap.boosts);
      }
      if (g.RANDOM_EVENTS && Array.isArray(g.RANDOM_EVENTS)) {
        // RANDOM_EVENTS sometimes has 'type' and 'name'/'desc'
        var re = g.RANDOM_EVENTS;
        for (var j = 0; j < re.length; j++) {
          var ev = re[j];
          if (!ev || !ev.type) continue;
          var loc =
            (catalogMap.randomEvents[ev.type] &&
              (catalogMap.randomEvents[ev.type][l] ||
                catalogMap.randomEvents[ev.type].en)) ||
            null;
          if (loc) {
            if (loc.name) ev.name = loc.name;
            if (loc.desc && typeof ev.desc === "string") ev.desc = loc.desc;
          }
        }
      }
      // Packet.data mirror (UMD constants)
      if (g.Packet && g.Packet.data) {
        if (
          g.Packet.data.PRESTIGE_UPGRADES &&
          Array.isArray(g.Packet.data.PRESTIGE_UPGRADES)
        ) {
          patchArray(
            g.Packet.data.PRESTIGE_UPGRADES,
            catalogMap.prestigeUpgrades,
          );
        }
        if (
          g.Packet.data.BOOST_SHOP &&
          Array.isArray(g.Packet.data.BOOST_SHOP)
        ) {
          patchArray(g.Packet.data.BOOST_SHOP, catalogMap.boosts);
        }
        if (
          g.Packet.data.RANDOM_EVENTS &&
          Array.isArray(g.Packet.data.RANDOM_EVENTS)
        ) {
          var re2 = g.Packet.data.RANDOM_EVENTS;
          for (var k = 0; k < re2.length; k++) {
            var ev2 = re2[k];
            if (!ev2 || !ev2.type) continue;
            var loc2 =
              (catalogMap.randomEvents[ev2.type] &&
                (catalogMap.randomEvents[ev2.type][l] ||
                  catalogMap.randomEvents[ev2.type].en)) ||
              null;
            if (loc2) {
              if (loc2.name) ev2.name = loc2.name;
              if (loc2.desc && typeof ev2.desc === "string")
                ev2.desc = loc2.desc;
            }
          }
        }
      }
    } catch (_) {}
  }

  // Translate elements with data-i18n="path.to.key" and optional data-i18n-attr="title"
  function translateDom(root, lang) {
    var l = normalizeLang(lang || getLanguage());
    try {
      var scope = root || (g.document && g.document.body);
      if (!scope || !scope.querySelectorAll) return;
      var nodes = scope.querySelectorAll("[data-i18n]");
      for (var i = 0; i < nodes.length; i++) {
        var el = nodes[i];
        var key = el.getAttribute("data-i18n");
        var attr = el.getAttribute("data-i18n-attr");
        var text = t(key, null, l);
        if (attr) {
          el.setAttribute(attr, text);
        } else {
          el.innerHTML = text; // allow <br> in strings like settings.note
        }
      }
    } catch (_) {}
  }

  // Expose a safe global "t" if none exists
  if (!g.t) {
    try {
      g.t = function (key, params) {
        return t(key, params);
      };
    } catch (_) {}
  }

  // Initialize <html lang=".."> for current language
  try {
    if (g.document && g.document.documentElement) {
      g.document.documentElement.setAttribute("lang", getLanguage());
    }
  } catch (_) {}

  return {
    SUPPORTED: SUPPORTED.slice(),
    dict: dict,
    t: t,
    getLanguage: getLanguage,
    setLanguage: function (lang) {
      var l = setLanguage(lang);
      applyLanguageToData(l);
      return l;
    },
    translateDom: translateDom,
    applyLanguageToData: applyLanguageToData,
  };
});
